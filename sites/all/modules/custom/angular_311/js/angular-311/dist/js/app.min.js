"use strict";function toggleMain(toggleClass,toggleType){switch(toggleType){case"remove":jQuery("#main-311").removeClass(toggleClass);break;case"add":jQuery("#main-311").addClass(toggleClass);break;default:jQuery("#main-311").toggleClass(toggleClass)}}angular.module("app",["drupalService","trackService","paymentService","app.menu","app.faq","app.track","app.payment","ui.router","metaInfo","ngSanitize","ngAnimate","ngTouch"]).run(["$rootScope","$state","$stateParams","metaInfo","$window","$location",function($rootScope,$state,$stateParams,metaInfo,$window,$location){$rootScope.$state=$state,$rootScope.$stateParams=$stateParams,$rootScope.apiUrl=Drupal.settings.angular_311.api_path,$rootScope.paymentUrl=Drupal.settings.angular_311.payment_url,$rootScope.trackUrl=Drupal.settings.angular_311.track_url,$rootScope.appPageDisplay=Drupal.settings.angular_311.app_page_display,console.log($rootScope),$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data){var title=toState.data.title&&toState.data.title.length?toState.data.title:"";metaInfo.setTitle(title);var description=toState.data.description&&toState.data.description.length?toState.data.description:"";metaInfo.setMetaDescription(description);var keywords=toState.data.keywords&&toState.data.keywords.length?toState.data.keywords:[];metaInfo.setMetaKeywords(keywords,toState.data.keywordAppend)}else fromState.data&&metaInfo.resetAll()}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){$window.ga&&$window.ga("send","pageview",{page:$location.path(),title:toState.data&&toState.data.title?toState.data.title:"FILLME!"}),fromState.name&&fromState.name.length&&(!toState.data||!toState.data||!toState.data.skipScroll)}),$rootScope.goSubRoute=function(baseRoute,subRoute,baseName){baseName=void 0==baseName?"base":baseName;var stateName=baseRoute+"."+subRoute;try{var state=$state.get(stateName);if(void 0==state||null==state)throw"myException"}catch(e){stateName=baseRoute+"."+baseName}$state.go(stateName)},$rootScope.displayExpanded=function(section){return section==$rootScope.appPageDisplay}}]).config(["$locationProvider","$stateProvider","$urlRouterProvider","metaInfoProvider",function($locationProvider,$stateProvider,$urlRouterProvider,metaInfoProvider){metaInfoProvider.setBaseTitle("FILLME!"),metaInfoProvider.setBaseDescription("FILLME!"),metaInfoProvider.setBaseKeywords("FILLME!")}]),angular.module("app").filter("termByTid",function(){return function(items,tid){for(var i=0;i<items.length;i++)if(parseInt(items[i].tid)==parseInt(tid))return items[i];return null}}).filter("termsNoParent",function(){return function(items){for(var filtered=[],i=0;i<items.length;i++)0==items[i].parent.length&&filtered.push(items[i]);return filtered}}).filter("termsByParent",function(){return function(items,tid){for(var filtered=[],i=0;i<items.length;i++)for(var j=0;j<items[i].parent.length;j++)items[i].parent[j].id==tid&&filtered.push(items[i]);return filtered}}),angular.module("app.faq",["ui.router"]).config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.when("","/answers"),$stateProvider.state("faq",{url:"/answers",templateUrl:appUrl+"views/faq/faq.html",data:{title:"FAQ",description:"About the about",keywords:"About, this, page"},resolve:{terms:function($stateParams,TaxonomyTerm){return TaxonomyTerm.query({vocabulary:vocabularyVid,sort:"weight",direction:"ASC"}).$promise.then(function(data){return data.list})}},controller:function($scope,$rootScope,$state,terms){$scope.terms=terms,$scope.active=null,$scope.childOpen=!1,$scope.open=function(item){console.log(item),$scope.active=item},$scope.openChildren=function(){$scope.childOpen=!0}}}).state("faq.child",{url:"/:tid",templateUrl:appUrl+"views/faq/faq-child.html",data:{title:"FAQ",description:"About the about",keywords:"About, this, page"},controller:function($scope,$rootScope,$state,$filter,terms,Node){$scope.activeTerm=$filter("termByTid")(terms,$state.params.tid),$scope.activeParent=$filter("termByTid")(terms,$scope.activeTerm.parent[0].id),console.log($scope.activeParent),$state.go("faq.child.answers",{nid:"list"})}}).state("faq.child.answers",{url:"/:nid",templateUrl:appUrl+"views/faq/faq-child-answers.html",data:{title:"FAQ",description:"About the about",keywords:"About, this, page"},controller:function($scope,$rootScope,$state,$filter,Node){$scope.activeNid="list"!=$state.params.nid?$state.params.nid:null,Node.query({field_faq_category:$state.params.tid,sort:"title",direction:"ASC"}).$promise.then(function(data){$scope.nodes=data.list,console.log($scope.nodes)})}})}]),angular.module("app.track",["ui.router"]).config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("status",{url:"/status",templateUrl:appUrl+"views/track/track-status.html",controller:function($scope,$rootScope,$state){}}).state("status.item",{url:"/:code",templateUrl:appUrl+"views/track/track-status-result.html",controller:function($scope,$rootScope,$state,Track){$scope.code=$state.params.code,Track.get({code:$state.params.code}).$promise.then(function(data){void 0!=data&&void 0!=data[0]?($scope.item=data[0],console.log($scope.item)):$scope.error=!0})}}).state("report",{url:"/report",templateUrl:appUrl+"views/track/track-report.html",resolve:{services:function($stateParams,TrackService){return TrackService.query({}).$promise.then(function(data){return data})}},controller:function($scope,$rootScope,$state,services){$scope.types=services,console.log(services)}}).state("report.map",{url:"/:type",templateUrl:appUrl+"views/track/track-report-map.html",controller:function($scope,$rootScope,$state,services){$scope.type=$state.params.type}})}]),angular.module("app.payment",["ui.router"]).config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("payments",{templateUrl:appUrl+"views/payment/payment.html",url:"/payments",resolve:{nodes:function($stateParams,Node){return Node.query({type:"payment"}).$promise.then(function(data){return data.list})}},controller:function($scope,$rootScope,$state,nodes){$scope.nodes=nodes}}).state("payments.type",{templateUrl:appUrl+"views/payment/payment-type.html",url:"/:nid",resolve:{node:function($stateParams,$filter,nodes){return $filter("filter")(nodes,{nid:$stateParams.nid})[0]}},controller:function($scope,$rootScope,$state,node,Payment){$scope.node=node,$scope.number="",$scope.amount="",$scope.numberClass="",$scope.$watch("number",function(){""!=$scope.number&&$scope.number.length>3?($scope.numberClass="has-warning",Payment.get({number:$scope.number},function(data){void 0!=data.amount?($scope.amount=data.amount,$scope.name=data.name,$scope.numberClass="has-success"):($scope.amount="",$scope.numberClass="has-error")})):$scope.numberClass=""}),$scope.submit=function(){window.location=$scope.node.url+"?edit[line_item_fields][field_payment_invoice_id][und][0][value]="+$scope.number+"&edit[line_item_fields][helm_payment_amount][und][0][value]="+$scope.amount}}})}]),angular.module("metaInfo",[]).provider("metaInfo",function(){var baseTitle="",title="",baseMetaDescription="",metaDescription="",baseMetaKeywords="",metaKeywords="";this.setBaseTitle=function(newTitle){baseTitle=newTitle},this.setBaseDescription=function(description){baseMetaDescription=description},this.setBaseKeywords=function(keywords){baseMetaKeywords=keywords},this.$get=function(){return{title:function(){return title.length?title+" | "+baseTitle:baseTitle},setTitle:function(newTitle){title=newTitle},metaDescription:function(){return metaDescription.length?metaDescription:baseMetaDescription},metaKeywords:function(){return metaKeywords.length?metaKeywords:baseMetaKeywords},setMetaDescription:function(newMetaDescription){metaDescription=newMetaDescription},setMetaKeywords:function(newKeywords,append){var keywords="";for(var key in newKeywords)keywords+=", "+newKeywords[key].name;metaKeywords="undefined"!=typeof append&&append?baseMetaKeywords+keywords:keywords},resetAll:function(){title="",metaDescription="",metaKeywords=""}}}}),angular.module("drupalService",["ngResource"]).factory("Node",["$resource","$rootScope",function($resource,$rootScope){return $resource($rootScope.apiUrl+"/node/:nid",{nid:"@nid"},{get:{method:"GET",transformRequest:function(data,headersGetter){headersGetter().Accept="application/json"},cache:!1},query:{method:"GET",transformRequest:function(data,headersGetter){headersGetter().Accept="application/json"},cache:!1,isArray:!1}})}]).factory("View",["$resource","$rootScope",function($resource,$rootScope){return $resource($rootScope.apiUrl+"/rest/:entity/:bundle/:a/:b/:c",{entityType:"@entity",name:"@bundle",a:"@arg0"},{query:{method:"GET",cache:!0,isArray:!0}})}]).factory("TaxonomyTerm",["$resource","$rootScope",function($resource,$rootScope){return $resource($rootScope.apiUrl+"/taxonomy_term/:tid",{vocabulary:"@vocabulary"},{get:{method:"GET",transformRequest:function(data,headersGetter){headersGetter().Accept="application/json"},cache:!0,isArray:!1},query:{method:"GET",transformRequest:function(data,headersGetter){headersGetter().Accept="application/json"},cache:!0,isArray:!1}})}]).factory("TaxonomyTermIndex",["$resource","$rootScope",function($resource,$rootScope){return $resource($rootScope.apiUrl+"taxonomy_term?vocabulary&sort=weight&direction=ASC",{vocabulary:"@vocabulary"},{query:{method:"GET",transformRequest:function(data,headersGetter){headersGetter().Accept="application/json"},cache:!0,isArray:!1}})}]).factory("TaxonomyTermNodes",["$resource","$rootScope",function($resource,$rootScope){return $resource($rootScope.apiUrl+"/taxonomy_term_nodes",{tid:"@tid"},{})}]).factory("User",["$resource","$rootScope",function($resource,$rootScope){return $resource($rootScope.apiUrl+"/user/:uid",{uid:"@uid"},{})}]).factory("Comment",["$resource","$rootScope",function($resource,$rootScope){return $resource($rootScope.apiUrl+"/node/:nid/comments",{nid:"@nid"},{post:{method:"POST",url:"/entity/comment"}})}]).factory("viewsFactory",["View",function(View){var service={};return service.pageLoad=function($scope,params){if(!$scope.loadingPage&&void 0!=$scope.items&&$scope.items.length>0){$scope.currentPage++;var newData=View.query(params,function(){newData.length>0&&(Array.prototype.push.apply($scope.items,newData),$scope.loadingPage=!1)})}$scope.loadingPage=!0},service}]).directive("openReveal",function(){return{restrict:"A",scope:{openReveal:"@"},link:function($scope,$element,$attrs){$element.on("click",function(){jQuery("#"+$scope.openReveal).foundation("reveal","open")})}}}),angular.module("trackService",["ngResource"]).factory("TrackService",["$resource","$rootScope",function($resource,$rootScope){return $resource($rootScope.trackUrl+"/services.json")}]).factory("Track",["$resource","$rootScope",function($resource,$rootScope){return $resource($rootScope.trackUrl+"/requests/:code.json",{code:"@code"},{get:{isArray:!0}})}]),angular.module("paymentService",["ngResource"]).factory("Payment",["$resource","$rootScope",function($resource,$rootScope){return $resource($rootScope.paymentUrl+"?number",{number:"@number"},{get:{cache:!0}})}]),angular.module("metaInfo").controller("metaInfoCtrl",["$scope","metaInfo",function($scope,metaInfo){$scope.pageTitle=function(){return metaInfo.title()},$scope.metaDescription=function(){return metaInfo.metaDescription()},$scope.metaKeywords=function(){return metaInfo.metaKeywords()}}]),angular.module("app").directive("pageReady",function($window,$browser){return{restrict:"A",link:function($scope,$element,$attrs){$browser.notifyWhenNoOutstandingRequests(function(){document.body.setAttribute("data-status","ready"),$scope.$root.$emit("pageReady"),$scope.$root.$broadcast("pageReady")})}}}),angular.module("app.menu",[]).directive("menu",function($window,$browser){return{restrict:"A",templateUrl:appUrl+"views/menu.html",link:function($scope,$element,$attrs){$scope.menu=[{title:"Get Answers",state:"faq",icon:"fa-question-circle"},{title:"Make a Payment",state:"payments",icon:"fa-usd"},{title:"Report an Issue",state:"report",icon:"fa-exclamation-triangle"},{title:"Check Status",state:"status",icon:"fa-wrench"}]}}}),angular.module("app").directive("mainToggle",function($window){return{restrict:"A",scope:{mainToggle:"@",mainToggleForce:"@",mainToggleEnter:"@"},link:function($scope,$element,$attrs){$scope.mainToggleEnter?toggleMain($scope.mainToggle,$scope.mainToggleForce):$element.on("click",function(){toggleMain($scope.mainToggle,$scope.mainToggleForce)})}}}).directive("menuClick",function($window,$browser){return{restrict:"A",link:function($scope,$element,$attrs){$element.on("click",function(event){return jQuery(".app-wrap").toggleClass("show-nav"),$attrs.menuClick&&"return-false"==$attrs.menuClick?(event.stopPropagation(),!1):void 0})}}});