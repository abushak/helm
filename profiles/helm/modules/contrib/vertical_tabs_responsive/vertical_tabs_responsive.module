<?php

/**
 * @file
 * Responsive version of vertical tabs.
 */

/**
 * Implements hook_menu().
 */
function vertical_tabs_responsive_menu() {
  $items = array();

  $items['admin/config/user-interface/vertical_tabs_responsive'] = array(
    'title' => 'Vertical Tabs Responsive',
    'description' => 'Change vertical tabs position',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vertical_tabs_responsive_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'vertical_tabs_responsive.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 *
 * Adds module's css and js files when needed.
 */
function vertical_tabs_responsive_form_alter(&$form, $form_state, $form_id) {
  global $base_url;

  // Prepare arrays if necessary.
  if (!isset($form['#attached'])) {
    $form['#attached'] = array();
  }
  if (!isset($form['#groups'])) {
    $form['#groups'] = array();
  }

  $all_groups_tab = vertical_tabs_responsive_all_form_groups_are_tabs($form['#groups']);
  $all_elem_sp = vertical_tabs_responsive_all_form_root_elements_are_special($form);
  $should_resp_vt = vertical_tabs_responsive_should_responsify_vt();

  if ((!$all_groups_tab && !$all_elem_sp && $should_resp_vt)) {
    // Only responsify when needed.
    vertical_tabs_responsive_set_attached($form['#attached']);
  }
  else {
    // We reset standart vertical tabs behaviour.
    $theme_path = drupal_get_path('theme', variable_get('admin_theme', 'seven'));
    $parent_theme = vertical_tabs_responsive_get_first_parent_theme(variable_get('admin_theme', 'seven'));

    $form['#attached']['js']['misc/vertical-tabs.js'] = $base_url . '/misc/vertical-tabs.js';

    if (file_exists($theme_path . '/vertical-tabs.css')) {
      $form['#attached']['css']['css/vertical-tabs.css'] = $theme_path . '/vertical-tabs.css';
    }
    elseif (file_exists($theme_path . '/css/vertical-tabs.css')) {
      $form['#attached']['css']['css/vertical-tabs.css'] = $theme_path . '/css/vertical-tabs.css';
    }
    elseif ($parent_theme != '') {
      $theme_path = drupal_get_path('theme', $parent_theme);
      $form['#attached']['css']['css/vertical-tabs.css'] = $theme_path . '/css/vertical-tabs.css';
    }
    else {
      $form['#attached']['css']['css/vertical-tabs.css'] = $base_url . '/misc/vertical-tabs.css';
    }
  }
}

/**
 * Function to get the first parent theme of a given theme.
 *
 * @param string $theme
 *   The name of the theme which we want to know its ancestor.
 *
 * @return string
 *   The name of the parent theme or empty string if not found.
 */
function vertical_tabs_responsive_get_first_parent_theme($theme) {
  $result = '';
  $themes = list_themes();

  if (isset($themes[$theme]->base_themes)) {
    $base_themes = array_keys($themes[$theme]->base_themes);
    $result = $base_themes[0];
  }

  return $result;
}

/**
 * Modifies attached array to insert module's CSS/JS.
 *
 * @param array $attached
 *   In/Out parameter. Pass the current attached array for form.
 */
function vertical_tabs_responsive_set_attached(array &$attached) {

  // Initialize variables.
  $attached = (isset($attached)) ? $attached : array();
  $cur_path = drupal_get_path('module', 'vertical_tabs_responsive');

  // Getting variables from administration page.
  $values = array(
    'left' => drupal_json_encode(variable_get('vertical_tabs_responsive_left', 0)),
    'vt_width' => drupal_json_encode(variable_get('vertical_tabs_responsive_vt_width', 30)),
    'button' => drupal_json_encode(variable_get('vertical_tabs_responsive_button', 0)),
  );

  // Passing variables to javascript.
  $attached['js'][] = array(
    'data' => array('vertical_tabs_responsive' => $values),
    'type' => 'setting',
  );

  // Including necessary files to responsify.
  $br = variable_get('vertical_tabs_responsive_break', '992');
  $attached['js']['vertical-tabs-responsive-js'] = $cur_path . '/js/vertical-tabs-custom.js';
  $attached['css']['vertical-tabs-responsive-base'] = $cur_path . '/css/vertical-tabs-base.css';
  $attached['css']['vertical-tabs-responsive-block-' . $br] = $cur_path . '/css/vertical-tabs-block-' . $br . '.css';

  // We include the left side CSS depending on checkbox value.
  if (variable_get('vertical_tabs_responsive_left') == 1) {
    // This CSS overrides some rules of right column CSS.
    $attached['css']['vertical-tabs-responsive-block-left-' . $br] = $cur_path . '/css/vertical-tabs-block-left-' . $br . '.css';
  }
  $attached['css']['vertical-tabs-responsive-fields'] = $cur_path . '/css/vertical-tabs-fields.css';
  $attached['css']['vertical-tabs-responsive-button'] = $cur_path . '/css/vertical-tabs-button.css';
}

/**
 * Implements hook_js_alter().
 */
function vertical_tabs_responsive_js_alter(&$javascript) {
  // Remove default vertical tabs js.
  unset($javascript['misc/vertical-tabs.js']);
}

/**
 * Implements hook_css_alter().
 */
function vertical_tabs_responsive_css_alter(&$css) {
  // Remove default vertical tabs css.
  unset($css['css/vertical-tabs.css']);
}

/**
 * Returns true if all field groups (field_group module) are tabs or fieldsets.
 *
 * @param array $groups
 *   Groups of the form.
 *
 * @return bool
 *   Indicates if all field groups are tabs or fieldsets.
 */
function vertical_tabs_responsive_all_form_groups_are_tabs(array $groups) {
  $result = FALSE;

  if (module_exists('field_group') && count($groups) > 0) {
    $counter = 0;
    foreach ($groups as $attr) {
      if (($attr->format_type != 'tab') && ($attr->format_type != 'fieldset')) {
        $counter++;
      }
    }
    if ($counter == 0) {
      $result = TRUE;
    }
  }
  return $result;
}

/**
 * Returns true if all root field elements aren't input form elements.
 *
 * @param array $form
 *   The form.
 *
 * @return bool
 *   Indicates if all root field elements aren't input form elements.
 */
function vertical_tabs_responsive_all_form_root_elements_are_special(array $form) {
  $result = FALSE;

  $special_elements = array('fieldset',
    'vertical_tabs',
    'actions',
    'button',
    'container',
    'image_button',
    'submit',
    'form',
    'hidden',
    'token',
    'markup',
    'item',
    'value');

  if (is_array($form)) {
    $all_form_elements = 0;
    $counter = 0;
    foreach ($form as $elem) {
      if (is_array($elem)) {
        $type = '';
        if (isset($elem['#type'])) {
          $type = $elem['#type'];
        }
        elseif (isset($elem['title']) && isset($elem['title']['#type'])) {
          $type = $elem['title']['#type'];
        }
        if (!empty($type)) {
          if (in_array($type, $special_elements)) {
            $counter++;
          }
          $all_form_elements++;
        }
      }
    }
    if ($counter == $all_form_elements) {
      $result = TRUE;
    }
  }
  return $result;
}

/**
 * Returns true if CSS and JS of this module should be added on currents page.
 *
 * @param bool $reset
 *   Indicates if result cache should be reset.
 *
 * @return bool
 *   Indicates if module's JS and CSS should be added.
 */
function vertical_tabs_responsive_should_responsify_vt($reset = FALSE) {
  global $user;
  static $result;

  if (!isset($result) || $reset) {
    $result = FALSE;

    // Role check out.
    $roles = variable_get('vertical_tabs_responsive_per_role', array());
    if (empty($roles)) {
      // No role restriction.
      $result = TRUE;
    }
    else {
      $user_roles = array_keys($user->roles);
      $intersect = array_intersect($roles, $user_roles);
      if (!empty($intersect)) {
        // User has at least one of selected roles.
        $result = TRUE;
      }
    }

    // Admin path check out.
    $result = $result && path_is_admin(current_path());

    // Blacklist check out.
    $paths = variable_get('vertical_tabs_responsive_path_blacklist', '');
    $path_disabled = !empty($paths) && drupal_match_path(current_path(), $paths);
    $result = $result && !$path_disabled;
  }
  return $result;
}

/**
 * Implements hook_help().
 *
 * Some help for users.
 */
function vertical_tabs_responsive_help($path, $arg) {
  switch ($path) {
    case 'admin/setting/vertical_tabs_responsive':

      $out = t('This module responsifies vertical tabs in node add/edit pages and all pages under admin/structure. You can choose in which side the vertical tabs will be on desktop screens. Also, you can choose the width of both content and vertical tabs section. Moreover, you can choose the width which sets the breakpoint between mobile and desktop versions of vertical tabs. Furhtermore, you can dinamically hide and show vertical tabs with a new button appended in top of it (button is disabled by default). Finally, you can specify a blacklist of paths where this module should be disabled.');
      break;

    case 'admin/help#vertical_tabs_responsive';

      $out = '<p>' . t('This module responsifies vertical tabs in node add/edit pages and all pages under admin/structure. You can choose in which side the vertical tabs will be on desktop screens. Also, you can choose the width of both content and vertical tabs section. Moreover, you can choose the width which sets the breakpoint between mobile and desktop versions of vertical tabs. Furhtermore, you can dinamically hide and show vertical tabs with a new button appended in top of it (button is disabled by default). Finally, you can specify a blacklist of paths where this module should be disabled.') . '</p>';
      break;

    default:
      $out = '';
      break;

  }
  return $out;
}
